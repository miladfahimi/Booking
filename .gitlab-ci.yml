stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY: registry.gitlab.com
  CI_PROJECT_NAMESPACE: miladfahimi2012/tennistime
  CI_REGISTRY_USER: "$CI_REGISTRY_USER"
  CI_REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"

before_script:
  - apt-get update && apt-get install -y curl bash
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

build:
  stage: build
  tags:
    - booking_app  # Ensure your runner is tagged appropriately
  image: docker:20.10.16
  script:
    - docker build --platform linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/frontend:latest -f frontend/Dockerfile.test ./frontend
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/frontend:latest
    - docker build --platform linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/authentication:latest -f authentication/Dockerfile.test ./authentication
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/authentication:latest
    - docker build --platform linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/provider:latest -f provider/Dockerfile.test ./provider
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/provider:latest
    - docker build --platform linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/bff:latest -f bff/Dockerfile.test ./bff
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/bff:latest
    - docker build --platform linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/profile:latest -f profile/Dockerfile.test ./profile
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/profile:latest
    - docker build --platform linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/reservation:latest -f reservation/Dockerfile.test ./reservation
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/reservation:latest

test:
  stage: test
  tags:
    - booking_app  # Ensure your runner is tagged appropriately
  script:
    - docker run --rm -v "$PWD:/workspace" -w /workspace maven:3.9.8-amazoncorretto-17-al2023 mvn clean test -f authentication/pom.xml
    - docker run --rm -v "$PWD:/workspace" -w /workspace maven:3.9.8-amazoncorretto-17-al2023 mvn clean test -f provider/pom.xml
    - docker run --rm -v "$PWD:/workspace" -w /workspace maven:3.9.8-amazoncorretto-17-al2023 mvn clean test -f bff/pom.xml
    - docker run --rm -v "$PWD:/workspace" -w /workspace maven:3.9.8-amazoncorretto-17-al2023 mvn clean test -f profile/pom.xml
    - docker run --rm -v "$PWD:/workspace" -w /workspace maven:3.9.8-amazoncorretto-17-al2023 mvn clean test -f reservation/pom.xml

deploy:
  stage: deploy
  tags:
    - booking_app  # Ensure your runner is tagged appropriately
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y openssh-client git docker-compose
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/gitlab_ci_deploy_key
    - chmod 600 ~/.ssh/gitlab_ci_deploy_key
    - ssh-add ~/.ssh/gitlab_ci_deploy_key
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - ssh -i ~/.ssh/gitlab_ci_deploy_key -o StrictHostKeyChecking=no root@49.12.109.90 "
      if [ -d /home/TennisTime/tennistime/.git ]; then
      echo 'Valid Git repository found. Pulling latest changes...';
      cd /home/TennisTime/tennistime && git reset --hard && git clean -fd && git pull origin main;
      else
      echo 'Cleaning up and re-cloning the repository...';
      rm -rf /home/TennisTime/tennistime;
      mkdir -p /home/TennisTime;
      git clone git@gitlab.com:miladfahimi2012/tennistime.git /home/TennisTime/tennistime;
      fi;
      
      cd /home/TennisTime/tennistime/devops &&
      docker-compose down &&
      docker-compose pull &&
      docker-compose up -d --remove-orphans
    "
  only:
    - main
